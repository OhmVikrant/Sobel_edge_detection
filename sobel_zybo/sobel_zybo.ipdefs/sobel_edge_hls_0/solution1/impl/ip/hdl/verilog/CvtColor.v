// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CvtColor (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        p_src_rows_V_dout,
        p_src_rows_V_empty_n,
        p_src_rows_V_read,
        p_src_cols_V_dout,
        p_src_cols_V_empty_n,
        p_src_cols_V_read,
        p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [10:0] p_src_rows_V_dout;
input   p_src_rows_V_empty_n;
output   p_src_rows_V_read;
input  [11:0] p_src_cols_V_dout;
input   p_src_cols_V_empty_n;
output   p_src_cols_V_read;
input  [7:0] p_src_data_stream_0_V_dout;
input   p_src_data_stream_0_V_empty_n;
output   p_src_data_stream_0_V_read;
input  [7:0] p_src_data_stream_1_V_dout;
input   p_src_data_stream_1_V_empty_n;
output   p_src_data_stream_1_V_read;
input  [7:0] p_src_data_stream_2_V_dout;
input   p_src_data_stream_2_V_empty_n;
output   p_src_data_stream_2_V_read;
output  [7:0] p_dst_data_stream_0_V_din;
input   p_dst_data_stream_0_V_full_n;
output   p_dst_data_stream_0_V_write;
output  [7:0] p_dst_data_stream_1_V_din;
input   p_dst_data_stream_1_V_full_n;
output   p_dst_data_stream_1_V_write;
output  [7:0] p_dst_data_stream_2_V_din;
input   p_dst_data_stream_2_V_full_n;
output   p_dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_src_rows_V_read;
reg p_src_cols_V_read;
reg p_src_data_stream_0_V_read;
reg p_src_data_stream_1_V_read;
reg p_src_data_stream_2_V_read;
reg p_dst_data_stream_0_V_write;
reg p_dst_data_stream_1_V_write;
reg p_dst_data_stream_2_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    p_src_rows_V_blk_n;
reg    p_src_cols_V_blk_n;
reg    p_src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_20_i_reg_414;
reg    p_src_data_stream_1_V_blk_n;
reg    p_src_data_stream_2_V_blk_n;
reg    p_dst_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tmp_20_i_reg_414_pp0_iter3_reg;
reg    p_dst_data_stream_1_V_blk_n;
reg    p_dst_data_stream_2_V_blk_n;
reg   [10:0] j_i_reg_256;
reg   [11:0] p_src_cols_V_read_reg_395;
reg    ap_block_state1;
reg   [10:0] p_src_rows_V_read_reg_400;
wire   [0:0] tmp_i_fu_271_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_fu_276_p2;
reg   [9:0] i_reg_409;
wire   [0:0] tmp_20_i_fu_286_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_20_i_reg_414_pp0_iter1_reg;
reg   [0:0] tmp_20_i_reg_414_pp0_iter2_reg;
wire   [10:0] j_fu_291_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_88_reg_423;
reg   [7:0] tmp_89_reg_428;
reg   [7:0] tmp_89_reg_428_pp0_iter2_reg;
reg   [7:0] tmp_90_reg_433;
reg   [7:0] tmp_90_reg_433_pp0_iter2_reg;
wire   [28:0] r_V_i_i_fu_371_p2;
reg   [28:0] r_V_i_i_reg_438;
wire   [29:0] grp_fu_377_p3;
reg   [29:0] r_V_1_reg_443;
reg    ap_enable_reg_pp0_iter3;
reg   [7:0] p_Val2_14_reg_448;
reg   [0:0] tmp_reg_453;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [9:0] i_i_reg_245;
wire    ap_CS_fsm_state8;
wire   [7:0] p_Val2_s_fu_360_p3;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] i_cast_cast_i_fu_267_p1;
wire   [11:0] j_cast_cast_i_fu_282_p1;
wire   [28:0] grp_fu_387_p3;
wire   [7:0] tmp_3_i_i_i_i_fu_325_p1;
wire   [7:0] p_Val2_15_fu_335_p2;
wire   [0:0] tmp_85_fu_328_p3;
wire   [0:0] tmp_86_fu_340_p3;
wire   [0:0] p_Result_2_i_i_i_i_1_fu_348_p2;
wire   [0:0] not_carry_fu_354_p2;
wire   [7:0] r_V_i_i_fu_371_p0;
wire   [21:0] r_V_i_i_fu_371_p1;
wire   [7:0] grp_fu_377_p0;
wire   [22:0] grp_fu_377_p1;
wire   [28:0] grp_fu_377_p2;
wire   [7:0] grp_fu_387_p0;
wire   [19:0] grp_fu_387_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [29:0] grp_fu_377_p00;
wire   [29:0] grp_fu_377_p20;
wire   [27:0] grp_fu_387_p00;
wire   [28:0] r_V_i_i_fu_371_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

sobel_edge_detectbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 29 ))
sobel_edge_detectbkb_U17(
    .din0(r_V_i_i_fu_371_p0),
    .din1(r_V_i_i_fu_371_p1),
    .dout(r_V_i_i_fu_371_p2)
);

sobel_edge_detectcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 23 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 30 ))
sobel_edge_detectcud_U18(
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .din2(grp_fu_377_p2),
    .dout(grp_fu_377_p3)
);

sobel_edge_detectdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
sobel_edge_detectdEe_U19(
    .din0(grp_fu_387_p0),
    .din1(grp_fu_387_p1),
    .din2(r_V_i_i_reg_438),
    .dout(grp_fu_387_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_271_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_i_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((tmp_i_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i_reg_245 <= i_reg_409;
    end else if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_245 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_i_fu_286_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_i_reg_256 <= j_fu_291_p2;
    end else if (((tmp_i_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_256 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_409 <= i_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_i_reg_414_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_14_reg_448 <= {{grp_fu_377_p3[29:22]}};
        tmp_reg_453 <= grp_fu_377_p3[32'd21];
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_read_reg_395 <= p_src_cols_V_dout;
        p_src_rows_V_read_reg_400 <= p_src_rows_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_i_reg_414_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_1_reg_443 <= grp_fu_377_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_i_reg_414_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_i_i_reg_438 <= r_V_i_i_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_20_i_reg_414 <= tmp_20_i_fu_286_p2;
        tmp_20_i_reg_414_pp0_iter1_reg <= tmp_20_i_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_20_i_reg_414_pp0_iter2_reg <= tmp_20_i_reg_414_pp0_iter1_reg;
        tmp_20_i_reg_414_pp0_iter3_reg <= tmp_20_i_reg_414_pp0_iter2_reg;
        tmp_89_reg_428_pp0_iter2_reg <= tmp_89_reg_428;
        tmp_90_reg_433_pp0_iter2_reg <= tmp_90_reg_433;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_i_reg_414 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_88_reg_423 <= p_src_data_stream_0_V_dout;
        tmp_89_reg_428 <= p_src_data_stream_1_V_dout;
        tmp_90_reg_433 <= p_src_data_stream_2_V_dout;
    end
end

always @ (*) begin
    if ((tmp_20_i_fu_286_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_271_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_271_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_dst_data_stream_0_V_blk_n = p_dst_data_stream_0_V_full_n;
    end else begin
        p_dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_0_V_write = 1'b1;
    end else begin
        p_dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_dst_data_stream_1_V_blk_n = p_dst_data_stream_1_V_full_n;
    end else begin
        p_dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_1_V_write = 1'b1;
    end else begin
        p_dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_dst_data_stream_2_V_blk_n = p_dst_data_stream_2_V_full_n;
    end else begin
        p_dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_2_V_write = 1'b1;
    end else begin
        p_dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_blk_n = p_src_cols_V_empty_n;
    end else begin
        p_src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_read = 1'b1;
    end else begin
        p_src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_0_V_blk_n = p_src_data_stream_0_V_empty_n;
    end else begin
        p_src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_0_V_read = 1'b1;
    end else begin
        p_src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_1_V_blk_n = p_src_data_stream_1_V_empty_n;
    end else begin
        p_src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_1_V_read = 1'b1;
    end else begin
        p_src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_2_V_blk_n = p_src_data_stream_2_V_empty_n;
    end else begin
        p_src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_20_i_reg_414 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_src_data_stream_2_V_read = 1'b1;
    end else begin
        p_src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_blk_n = p_src_rows_V_empty_n;
    end else begin
        p_src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_read = 1'b1;
    end else begin
        p_src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_271_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_20_i_fu_286_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_20_i_fu_286_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_0_V_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_0_V_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_0_V_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_2_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((tmp_20_i_reg_414 == 1'd1) & (p_src_data_stream_0_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = (((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_20_i_reg_414_pp0_iter3_reg == 1'd1) & (p_dst_data_stream_0_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_377_p0 = grp_fu_377_p00;

assign grp_fu_377_p00 = tmp_89_reg_428_pp0_iter2_reg;

assign grp_fu_377_p1 = 30'd2462056;

assign grp_fu_377_p2 = grp_fu_377_p20;

assign grp_fu_377_p20 = grp_fu_387_p3;

assign grp_fu_387_p0 = grp_fu_387_p00;

assign grp_fu_387_p00 = tmp_90_reg_433_pp0_iter2_reg;

assign grp_fu_387_p1 = 28'd478150;

assign i_cast_cast_i_fu_267_p1 = i_i_reg_245;

assign i_fu_276_p2 = (i_i_reg_245 + 10'd1);

assign j_cast_cast_i_fu_282_p1 = j_i_reg_256;

assign j_fu_291_p2 = (j_i_reg_256 + 11'd1);

assign not_carry_fu_354_p2 = (tmp_86_fu_340_p3 | p_Result_2_i_i_i_i_1_fu_348_p2);

assign p_Result_2_i_i_i_i_1_fu_348_p2 = (tmp_85_fu_328_p3 ^ 1'd1);

assign p_Val2_15_fu_335_p2 = (p_Val2_14_reg_448 + tmp_3_i_i_i_i_fu_325_p1);

assign p_Val2_s_fu_360_p3 = ((not_carry_fu_354_p2[0:0] === 1'b1) ? p_Val2_15_fu_335_p2 : 8'd255);

assign p_dst_data_stream_0_V_din = p_Val2_s_fu_360_p3;

assign p_dst_data_stream_1_V_din = p_Val2_s_fu_360_p3;

assign p_dst_data_stream_2_V_din = p_Val2_s_fu_360_p3;

assign r_V_i_i_fu_371_p0 = r_V_i_i_fu_371_p00;

assign r_V_i_i_fu_371_p00 = tmp_88_reg_423;

assign r_V_i_i_fu_371_p1 = 29'd1254096;

assign start_out = real_start;

assign tmp_20_i_fu_286_p2 = (($signed(j_cast_cast_i_fu_282_p1) < $signed(p_src_cols_V_read_reg_395)) ? 1'b1 : 1'b0);

assign tmp_3_i_i_i_i_fu_325_p1 = tmp_reg_453;

assign tmp_85_fu_328_p3 = r_V_1_reg_443[32'd29];

assign tmp_86_fu_340_p3 = p_Val2_15_fu_335_p2[32'd7];

assign tmp_i_fu_271_p2 = (($signed(i_cast_cast_i_fu_267_p1) < $signed(p_src_rows_V_read_reg_400)) ? 1'b1 : 1'b0);

endmodule //CvtColor
